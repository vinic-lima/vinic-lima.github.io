{
  "hash": "41032e13c541ff5930c6253310c49367",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Multiple estimation with custom statistics II\"\nauthor: \"Vinicius Lima\"\nformat: html\neditor: visual\nproject-dir: \"C:/Dropbox/academic/website/vinic-lima.github.io/posts\"\n---\n\n\n\n\n\nIn this post, I tackle the same problem of the [previous post](001_multiple_estim_custom_stats.html), but now I use more direct approach with `fixest`'s `etable` instead of `modelsummary`.\n\n## The Problem\n\nRecall the dataset: there are two outcomes, `y1` and `y2`, and two treatment variables, `T1` and `T2`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_data <- readRDS('001_files/001_data.rds')\n\nhead(df_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         y1        y2 T1 T2\n1 0.4811594 0.3532764  0  0\n2 0.5094737 0.3827893  0  0\n3 0.4913295 0.3866279  0  0\n4 0.4103896 0.6947368 NA  0\n5 0.3611111 0.6666667 NA  0\n6 0.4083333 0.6883117 NA  0\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(df_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       y1               y2                T1              T2       \n Min.   :0.1613   Min.   :0.05846   Min.   :0.000   Min.   :0.000  \n 1st Qu.:0.3875   1st Qu.:0.38557   1st Qu.:0.000   1st Qu.:0.000  \n Median :0.4348   Median :0.46651   Median :1.000   Median :1.000  \n Mean   :0.4333   Mean   :0.48190   Mean   :0.557   Mean   :0.638  \n 3rd Qu.:0.4788   3rd Qu.:0.55340   3rd Qu.:1.000   3rd Qu.:1.000  \n Max.   :0.6392   Max.   :0.93600   Max.   :1.000   Max.   :1.000  \n                                    NA's   :4288    NA's   :266    \n```\n\n\n:::\n:::\n\n\n\n\n\nI want to estimate the effect of each treatment on each outcome, running 4 regressions.\n\nAdditionally, I want to report the mean outcome among control units for each case. This is tricky because the estimation sample varies by treatment.\n\nWe'll solve this using the packages *fixest* and *dplyr*.\n\n## Solution\n\nUse `feols` to run the four regressions and store the results.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(fixest)\n\nmy_estimation <- feols(data = df_data, fml = c(y1,y2) ~ sw(T1, T2))\n```\n:::\n\n\n\n\n\nThe logic behind the approach is to retrieve the model's design matrix and then find the dependent variable values associated with the control observations. Let's first check how it works with a single model.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# The object 'my_estimation' is a list; we must retrieve some of the elements to  work with `model.matrix`\nmy_estimation_1 <- my_estimation[lhs = 1, rhs = 1][[1]]\n\n# No, we get the treatment and dependent variables from the design matrix\nt <- model.matrix(my_estimation_1, subset = 'T', type = 'rhs') \ny <- model.matrix(my_estimation_1, type = 'lhs')\n\n# Find which rows contain the control units\ni <- which(t[,1] == 0)\n\n# Compute the mean of the dependent variable for the control units\nprint(mean(y[i]))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.4296165\n```\n\n\n:::\n:::\n\n\n\n\n\n**Remark**: I used the argument \"subset\" to define `t`, but not with `y`. This is because the option \"rhs\" produces a matrix with all regressors. By using `subset = \"T\"` I tell the function that I want to keep in `t` only columns whose names match \"T\". In my case, this is sufficient to get only the treatment variable. Be cautious to ensure that you retrieve the correct variable.\n\nNow, I use the `fitstat_register` function from `fixest` to apply these steps to all regressions and display the computed statistic in the regression table.\n\nWe must supply three arguments for this function:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfitstat_register(\n  type = \"meandepvar\", \n  fun = function(x) {\n    \n    t <- model.matrix(x, subset = 'T', type = 'rhs') \n    y <- model.matrix(x, type = 'lhs')\n    i <- which(t[,1] == 0)\n    return(mean(y[i]))\n    \n    },\n  alias = \"Mean of Dep. Variable\"\n  )\n```\n:::\n\n\n\n\n\nThe argument *type* establishes a name for the statistic, which you will need to refer to when calling it within the table.\n\nThen, we must supply the function that effectively computes the statistic using the objects available from the estimation output.\n\nFinally, the argument *alias* is the text displayed in the regression table.\n\nI now use `etable` to report the regression output, including the desired statistics with the \"fitstat\" argument. I include our custom \"meandepvar\" and the number of observations \"n\".\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\netable(my_estimation,\n       fitstat = ~ meandepvar + n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                         my_estimation.1    my_estimation.2     my_estimation.3\nDependent Var.:                       y1                 y1                  y2\n                                                                               \nConstant              0.4296*** (0.0009) 0.4207*** (0.0009)  0.4839*** (0.0021)\nT1                    0.0151*** (0.0012)                    -0.0125*** (0.0029)\nT2                                       0.0197*** (0.0011)                    \n_____________________ __________________ __________________ ___________________\nS.E. type                            IID                IID                 IID\nMean of Dep. Variable            0.42962            0.42070             0.48386\nObservations                      10,731             14,753              10,731\n\n                          my_estimation.4\nDependent Var.:                        y2\n                                         \nConstant               0.5012*** (0.0020)\nT1                                       \nT2                    -0.0323*** (0.0025)\n_____________________ ___________________\nS.E. type                             IID\nMean of Dep. Variable             0.50118\nObservations                       14,753\n---\nSignif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n\n\n\nThat's it.\n",
    "supporting": [
      "002_multiple_estim_custom_stats_II_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}