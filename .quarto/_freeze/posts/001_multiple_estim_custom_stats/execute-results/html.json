{
  "hash": "0fdab26f0c3c4c7cb2dea024762b0bfd",
  "result": {
    "markdown": "---\ntitle: \"Multiple estimation with custom statistics\"\nauthor: \"Vinicius Lima\"\nformat: html\neditor: visual\nproject-dir: \"C:/Dropbox/academic/website/vinic-lima.github.io/posts\"\n---\n\n\n## The Problem\n\nI have a dataset with two outcomes, `y1` and `y2`, and two treatment variables, `T1` and `T2`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_data <- readRDS('001_files/001_data.rds')\n\nhead(df_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         y1        y2 T1 T2\n1 0.4811594 0.3532764  0  0\n2 0.5094737 0.3827893  0  0\n3 0.4913295 0.3866279  0  0\n4 0.4103896 0.6947368 NA  0\n5 0.3611111 0.6666667 NA  0\n6 0.4083333 0.6883117 NA  0\n```\n:::\n\n```{.r .cell-code}\nsummary(df_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       y1               y2                T1              T2       \n Min.   :0.1613   Min.   :0.05846   Min.   :0.000   Min.   :0.000  \n 1st Qu.:0.3875   1st Qu.:0.38557   1st Qu.:0.000   1st Qu.:0.000  \n Median :0.4348   Median :0.46651   Median :1.000   Median :1.000  \n Mean   :0.4333   Mean   :0.48190   Mean   :0.557   Mean   :0.638  \n 3rd Qu.:0.4788   3rd Qu.:0.55340   3rd Qu.:1.000   3rd Qu.:1.000  \n Max.   :0.6392   Max.   :0.93600   Max.   :1.000   Max.   :1.000  \n                                    NA's   :4288    NA's   :266    \n```\n:::\n:::\n\n\nI want to estimate the effect of each treatment on each outcome, running 4 regressions. Additionally, I want to report the mean outcome among control units for each case. This is tricky because the estimation sample varies by treatment.\n\nWe'll solve this using the packages *fixest*, *modelsummary*, and *dplyr*.\n\n## Solution\n\nThe `feols` function provides a one-line solution to run the four regressions and store the results in a list.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(fixest)\nlibrary(modelsummary)\n\nmy_estimation <- feols(data = df_data, fml = c(y1,y2) ~ sw(T1, T2))\n\nmodelsummary(my_estimation, gof_map = 'nobs')\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:center;\"> lhs: y1; rhs: T1 </th>\n   <th style=\"text-align:center;\">  lhs: y1; rhs: T2 </th>\n   <th style=\"text-align:center;\">  lhs: y2; rhs: T1 </th>\n   <th style=\"text-align:center;\">  lhs: y2; rhs: T2 </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> (Intercept) </td>\n   <td style=\"text-align:center;\"> 0.430 </td>\n   <td style=\"text-align:center;\"> 0.421 </td>\n   <td style=\"text-align:center;\"> 0.484 </td>\n   <td style=\"text-align:center;\"> 0.501 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:center;\"> (0.001) </td>\n   <td style=\"text-align:center;\"> (0.001) </td>\n   <td style=\"text-align:center;\"> (0.002) </td>\n   <td style=\"text-align:center;\"> (0.002) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> T1 </td>\n   <td style=\"text-align:center;\"> 0.015 </td>\n   <td style=\"text-align:center;\">  </td>\n   <td style=\"text-align:center;\"> -0.012 </td>\n   <td style=\"text-align:center;\">  </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:center;\"> (0.001) </td>\n   <td style=\"text-align:center;\">  </td>\n   <td style=\"text-align:center;\"> (0.003) </td>\n   <td style=\"text-align:center;\">  </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> T2 </td>\n   <td style=\"text-align:center;\">  </td>\n   <td style=\"text-align:center;\"> 0.020 </td>\n   <td style=\"text-align:center;\">  </td>\n   <td style=\"text-align:center;\"> -0.032 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;box-shadow: 0px 1.5px\">  </td>\n   <td style=\"text-align:center;box-shadow: 0px 1.5px\">  </td>\n   <td style=\"text-align:center;box-shadow: 0px 1.5px\"> (0.001) </td>\n   <td style=\"text-align:center;box-shadow: 0px 1.5px\">  </td>\n   <td style=\"text-align:center;box-shadow: 0px 1.5px\"> (0.002) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Num.Obs. </td>\n   <td style=\"text-align:center;\"> 10731 </td>\n   <td style=\"text-align:center;\"> 14753 </td>\n   <td style=\"text-align:center;\"> 10731 </td>\n   <td style=\"text-align:center;\"> 14753 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nA manual solution would involve calculating the control means and adding a row to the output table using `modelsummary` tools.\n\nHowever, I want to automate this to avoid manual errors, especially as more models are estimated.\n\nThus, I'll develop a function to append the mean control outcome to the `modelsummary` output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfn_append_mean <- function(mod_object, estimating_data){\n  \n  # Part 1: Calculate the mean of the dependent variable --------------------\n  \n  # Extract variable names\n  dep_var_name   = all.vars(mod_object$fml_all$linear)[1]\n  treatment_name = all.vars(mod_object$fml_all$linear)[2] # The index might vary depending on the formula\n  \n  # Get the subset of 'estimating_data' used to estimate 'mod_object'\n  used_obs = unlist(mod_object$obs_selection)\n  \n  # Calculate the mean of 'dep_var_name' where 'treatment_name' == 0\n  average = estimating_data[used_obs,] %>%\n    filter(!!sym(treatment_name) == 0) %>%\n    select(!!sym(dep_var_name)) %>%\n    pull() %>%\n    mean()\n  \n  # Part 2: Append the mean as a statistic in the model ---------------------\n  \n  # Convert the model to a 'modelsummary_list' object\n  mod_output = modelsummary(mod_object, output = 'modelsummary_list')\n  \n  # Append the control mean\n  mod_output$glance$control.mean = average\n  \n  return(mod_output)\n  \n}\n```\n:::\n\n\nLet's apply the function to one model:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfn_append_mean(mod_object = my_estimation[[1]],\n               estimating_data =   df_data) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$tidy\n         term   estimate    std.error statistic df.error     p.value group\n1 (Intercept) 0.42961651 0.0008821051 487.03553    10729 0.00000e+00      \n2          T1 0.01514463 0.0011817514  12.81541    10729 2.52325e-37      \n  conf.low conf.high\n1       NA        NA\n2       NA        NA\n\n$glance\n        aic       bic  r.squared adj.r.squared       rmse  nobs vcov.type\n1 -29639.18 -29624.62 0.01507677    0.01498497 0.06080203 10731       IID\n  control.mean\n1    0.4296165\n\nattr(,\"class\")\n[1] \"modelsummary_list\"\n```\n:::\n:::\n\n\nNow, apply the function to all models and format the output statistics:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Apply the function to all models\nmy_estimation_append <- lapply(my_estimation, \n                               fn_append_mean, \n                               estimating_data = df_data)\n\n# See https://modelsummary.com/articles/modelsummary.html#fmt-round-and-format\ngm <- list(\n  list(\"raw\" = \"nobs\", \"clean\" = \"N\", \"fmt\" = \"%.0f\"),\n  list(\"raw\" = \"control.mean\", \"clean\" = \"Control mean\", \"fmt\" = \"%.3f\")\n)\n\nmodelsummary(my_estimation_append, gof_map = gm)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:center;\"> lhs: y1; rhs: T1 </th>\n   <th style=\"text-align:center;\">  lhs: y1; rhs: T2 </th>\n   <th style=\"text-align:center;\">  lhs: y2; rhs: T1 </th>\n   <th style=\"text-align:center;\">  lhs: y2; rhs: T2 </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> (Intercept) </td>\n   <td style=\"text-align:center;\"> 0.430 </td>\n   <td style=\"text-align:center;\"> 0.421 </td>\n   <td style=\"text-align:center;\"> 0.484 </td>\n   <td style=\"text-align:center;\"> 0.501 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:center;\"> (0.001) </td>\n   <td style=\"text-align:center;\"> (0.001) </td>\n   <td style=\"text-align:center;\"> (0.002) </td>\n   <td style=\"text-align:center;\"> (0.002) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> T1 </td>\n   <td style=\"text-align:center;\"> 0.015 </td>\n   <td style=\"text-align:center;\">  </td>\n   <td style=\"text-align:center;\"> -0.012 </td>\n   <td style=\"text-align:center;\">  </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:center;\"> (0.001) </td>\n   <td style=\"text-align:center;\">  </td>\n   <td style=\"text-align:center;\"> (0.003) </td>\n   <td style=\"text-align:center;\">  </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> T2 </td>\n   <td style=\"text-align:center;\">  </td>\n   <td style=\"text-align:center;\"> 0.020 </td>\n   <td style=\"text-align:center;\">  </td>\n   <td style=\"text-align:center;\"> -0.032 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;box-shadow: 0px 1.5px\">  </td>\n   <td style=\"text-align:center;box-shadow: 0px 1.5px\">  </td>\n   <td style=\"text-align:center;box-shadow: 0px 1.5px\"> (0.001) </td>\n   <td style=\"text-align:center;box-shadow: 0px 1.5px\">  </td>\n   <td style=\"text-align:center;box-shadow: 0px 1.5px\"> (0.002) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> N </td>\n   <td style=\"text-align:center;\"> 10731 </td>\n   <td style=\"text-align:center;\"> 14753 </td>\n   <td style=\"text-align:center;\"> 10731 </td>\n   <td style=\"text-align:center;\"> 14753 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Control mean </td>\n   <td style=\"text-align:center;\"> 0.430 </td>\n   <td style=\"text-align:center;\"> 0.421 </td>\n   <td style=\"text-align:center;\"> 0.484 </td>\n   <td style=\"text-align:center;\"> 0.501 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nLet's compare with the results from a manual calculation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_data %>% \n  filter(T1 == 0) %>% \n  summarise_at(c('y1', 'y2'), mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 2\n     y1    y2\n  <dbl> <dbl>\n1 0.430 0.484\n```\n:::\n\n```{.r .cell-code}\ndf_data %>% \n  filter(T2 == 0) %>% \n  summarise_at(c('y1', 'y2'), mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 2\n     y1    y2\n  <dbl> <dbl>\n1 0.421 0.501\n```\n:::\n:::\n\n\n**Final Remarks**\n\n-   The `feols` option `data.save` could remove the need to pass `estimating_data`, but I chose not to store unnecessary data.\n-   Ensure that `estimating_data` matches the data used to estimate `mod_object`, or the results will be incorrect.\n-   Be cautious when using the mod_object\\$obs_selection object if there are missing values in the dependent variable. In such cases, the output will include both the indices of observations dropped due to NAs and those used in the estimation.\n\nThat's it.\n",
    "supporting": [
      "001_multiple_estim_custom_stats_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/kePrint-0.0.1/kePrint.js\"></script>\r\n<link href=\"../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}